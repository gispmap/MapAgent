from openai import OpenAI

def prompt(input):
    template = f"""
        <role>: 你是一个专业的旅游地图制图员，你能够根据用户输入，精确理解用户的需求，并从中提取关键的制图信息
        <instruction>: 
            根据```标记的用户输入，提取和推理出制图信息。用户的输入有四类：
            desc1：模糊的描述
            example：我要到成都旅游，需要一张成都旅游地图。
            desc2：稍微详细的描述
            example：我要到成都旅游三天，需要一张成都旅游地图。
            desc3： 中等详细的描述
            example：我要到成都旅游三天，想去天府广场、春熙路等旅游景点，请制作一份成都旅游地图，并标注我想要去的景点的位置。
            desc4：详细的描述
            example：我要到成都旅游三天，我的计划是第一天去锦里古街和武侯祠，第二天去春熙路和天府广场，第三天去杜甫草堂和青羊宫。请制作一份旅游地图。

            if desc1:
                if 所需的地图包含线路（如旅游地图）:
                    制定旅游攻略，输入中没有包含天数，就默认按照三天进行规划，从旅游攻略中提取和推理
                else:
                    不包含线路，就正常推理
            if desc2 || desc3:
                制定旅游攻略，输入中没有包含天数，就默认按照三天进行规划，规划中要包含输入中的景点，除此外可以根据时间安排，丰富规划添加更多景点，然后从旅游攻略中提取和推理
            if desc4:
               从用户的输入中提取和推理，可以更具自己的经验，对用户输入进行补充
               
            
            你所做的旅游规划不仅要包含旅游景点，还必须要包含餐馆、饭店等服务性场所，来解决游客吃饭的问题。

            最终输出结果为JSON格式，JSON格式如下：
            {{
                "制图区域": (地图所显示的区域，字符串格式，必须要有结果。),
                "地图类型": (地图所表达的主题，字符串格式，必须要有结果。),
                "制图信息"：{{
                    "NameList": (提取或推理出表示点的名称。格式为list，该属性是必需的。),
                    "CoorList": [[lat, lon]](景点经纬度坐标，坐标保留六位小数。格式为list，该属性是必需的。),
                    "Tickets" : (该属性记录每一个景点的门票价钱，值有两种："xxx元"或"免费"，格式为list, 该属性是必须的。)，
                    "RouteList": (该属性为可选择项。当用户所需地图包含线路时，该属性是必需的。
                                格式为2维数组，数组每一行为一天的行程,以景点名称表示。),
                    "TourTime": {{
                                    (该对象的属性为每天的计数(day1,day2)，属性的格式为list，时间按照"xxxh"记录，表示当天每一个旅游景点所需的旅游时间)
                                }}(该属性记录每一个景点所需的游览时间，格式为dictionary，该属性是必须的。),
                    "Transportation": {{
                                        （该对象的属性为每天的计数(day1,day2)，其值的格式为list，记录当天相邻两个景点之间通行方式，通行方式的描述按照"开车或者打车xxx公里"，步行xxx公里"，"乘坐地铁xxx号线xxx分钟"等格式)
                                    }}(该属性记录两个景点之间通行的最佳路线导航，格式为dictionary，该属性是必须的),
                    "Description": ("RouteList"属性不存在，则该属性的值为你为"NameList"中每个景点生成的介绍；
                                    "RouteList"属性存在，该属性的值为你推理过程中为游客制定旅游攻略。字符串格式，该属性是必需的。)
                }}
            }}

            在提取推理关键制图信息的过程中你可以按照完整格式"thought, action, observer"或者单一格式"thought, final answer"进行推理。
            完整格式：
            Thought: (反思你的进展并决定下一步做什么（基于观察，如果存在)，不要跳过)
            Action: (根据之前的想法和观察决定动作)
            Observer: (行动的结果)
            (此过程可以重复，并且每次只能处理一个子任务)

            或者
            Thought: (查看原始问题并检查我的整个过程)
            Final Answer: (根据观察结果输出原始输入问题的最终答案)
            
            推理的第一步必须是判断用户输入属于什么类型，判断该用户所需要的地图是否包含线路。最后一步必须是输出结果。
        <demand>: 输出中只包含JSON结果，不包含推理过程。推理过程是你的思考过程，你只需要给出最终的推理结果。
        <input>: ```{input}```

    """
    return template

def get_completion(input):
    template = prompt(input)
    client = OpenAI()
    response = client.chat.completions.create(
        model = "gpt-4o",
        messages=[
                {'role': 'user', 'content': template}
            ],
            temperature=1,
            # n=5,
            top_p=1
    )
    return response.choices[0].message.content